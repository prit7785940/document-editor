{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sk745\\\\REAL-TIME-COLLABORATIVE-DOCUMENT-EDITOR\\\\TelePresence\\\\client\\\\src\\\\components\\\\Editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/theme/dracula.css\";\nimport \"codemirror/addon/edit/closetag\";\nimport \"codemirror/addon/edit/closebrackets\";\nimport \"codemirror/lib/codemirror.css\";\nimport CodeMirror from \"codemirror\";\nimport axios from \"axios\"; // For API requests\nimport { ACTIONS } from \"../Actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Editor({\n  socketRef,\n  roomId,\n  onCodeChange\n}) {\n  _s();\n  const editorRef = useRef(null);\n\n  // Initialize CodeMirror and fetch initial code\n  useEffect(() => {\n    const init = async () => {\n      const editor = CodeMirror.fromTextArea(document.getElementById(\"realtimeEditor\"), {\n        mode: {\n          name: \"javascript\",\n          json: true\n        },\n        theme: \"dracula\",\n        autoCloseTags: true,\n        autoCloseBrackets: true,\n        lineNumbers: true,\n        scrollbarStyle: null,\n        lineWrapping: true\n      });\n      editorRef.current = editor;\n      editor.setSize(null, \"100%\");\n\n      // Handle editor changes\n      editor.on(\"change\", (instance, changes) => {\n        const {\n          origin\n        } = changes;\n        const code = instance.getValue();\n        onCodeChange(code);\n        if (origin !== \"setValue\") {\n          socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n            roomId,\n            code\n          });\n        }\n      });\n\n      // Fetch code from DB\n      try {\n        const response = await axios.get(`http://localhost:5000/download/${roomId}`);\n        if (response.status === 200 && response.data) {\n          editor.setValue(response.data);\n        } else {\n          console.log(\"Room has no code or doesn't exist.\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching code:\", err);\n      }\n    };\n    init();\n  }, [roomId, socketRef, onCodeChange]);\n\n  // Listen for incoming code updates from server\n  useEffect(() => {\n    const currentSocket = socketRef.current;\n    if (currentSocket) {\n      const onCodeUpdate = ({\n        code\n      }) => {\n        if (code !== null && code !== editorRef.current.getValue()) {\n          editorRef.current.setValue(code);\n        }\n      };\n      currentSocket.on(ACTIONS.CODE_CHANGE, onCodeUpdate);\n      return () => {\n        currentSocket.off(ACTIONS.CODE_CHANGE, onCodeUpdate);\n      };\n    }\n  }, [socketRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"750px\",\n      overflow: \"hidden\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"realtimeEditor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(Editor, \"ueqoO+5gVAT6IRBF08iN84bYr2g=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","CodeMirror","axios","ACTIONS","jsxDEV","_jsxDEV","Editor","socketRef","roomId","onCodeChange","_s","editorRef","init","editor","fromTextArea","document","getElementById","mode","name","json","theme","autoCloseTags","autoCloseBrackets","lineNumbers","scrollbarStyle","lineWrapping","current","setSize","on","instance","changes","origin","code","getValue","emit","CODE_CHANGE","response","get","status","data","setValue","console","log","err","error","currentSocket","onCodeUpdate","off","style","height","overflow","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sk745/REAL-TIME-COLLABORATIVE-DOCUMENT-EDITOR/TelePresence/client/src/components/Editor.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/theme/dracula.css\";\r\nimport \"codemirror/addon/edit/closetag\";\r\nimport \"codemirror/addon/edit/closebrackets\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport CodeMirror from \"codemirror\";\r\nimport axios from \"axios\"; // For API requests\r\nimport { ACTIONS } from \"../Actions\";\r\n\r\nfunction Editor({ socketRef, roomId, onCodeChange }) {\r\n  const editorRef = useRef(null);\r\n\r\n  // Initialize CodeMirror and fetch initial code\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      const editor = CodeMirror.fromTextArea(\r\n        document.getElementById(\"realtimeEditor\"),\r\n        {\r\n          mode: { name: \"javascript\", json: true },\r\n          theme: \"dracula\",\r\n          autoCloseTags: true,\r\n          autoCloseBrackets: true,\r\n          lineNumbers: true,\r\n          scrollbarStyle: null,\r\n          lineWrapping: true,\r\n        }\r\n      );\r\n      editorRef.current = editor;\r\n      editor.setSize(null, \"100%\");\r\n\r\n      // Handle editor changes\r\n      editor.on(\"change\", (instance, changes) => {\r\n        const { origin } = changes;\r\n        const code = instance.getValue();\r\n        onCodeChange(code);\r\n        if (origin !== \"setValue\") {\r\n          socketRef.current.emit(ACTIONS.CODE_CHANGE, {\r\n            roomId,\r\n            code,\r\n          });\r\n        }\r\n      });\r\n\r\n      // Fetch code from DB\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:5000/download/${roomId}`\r\n        );\r\n        if (response.status === 200 && response.data) {\r\n          editor.setValue(response.data);\r\n        } else {\r\n          console.log(\"Room has no code or doesn't exist.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching code:\", err);\r\n      }\r\n    };\r\n\r\n    init();\r\n  }, [roomId, socketRef, onCodeChange]);\r\n\r\n  // Listen for incoming code updates from server\r\n  useEffect(() => {\r\n    const currentSocket = socketRef.current;\r\n    if (currentSocket) {\r\n      const onCodeUpdate = ({ code }) => {\r\n        if (code !== null && code !== editorRef.current.getValue()) {\r\n          editorRef.current.setValue(code);\r\n        }\r\n      };\r\n      currentSocket.on(ACTIONS.CODE_CHANGE, onCodeUpdate);\r\n\r\n      return () => {\r\n        currentSocket.off(ACTIONS.CODE_CHANGE, onCodeUpdate);\r\n      };\r\n    }\r\n  }, [socketRef]);\r\n\r\n  return (\r\n    <div style={{ height: \"750px\", overflow: \"hidden\" }}>\r\n      <textarea id=\"realtimeEditor\"></textarea>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Editor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}